AWSTemplateFormatVersion: "2010-09-09"
Description: Setup an EC2 instance for deep racer

Parameters:
  MyIPAddress:
    Type: String
  RuleNumber:
    Type: String
  NetworkAclId:
    Type: String
  VPC:
    Type: String
  Subnet0:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  Subnet3:
    Type: String
  Subnet4:
    Type: String
  Subnet5:
    Type: String

Outputs:
  InstanceProfile:
    Description: Instance Profile
    Value: !Ref InstanceProfile
    Export:
      Name:
        !Sub '${AWS::StackName}-InstanceProfile'

  Bucket:
    Description: S3 Bucket
    Value: !Ref Bucket
    Export:
      Name:
        !Sub '${AWS::StackName}-Bucket'

  SecurityGroup:
    Description: Security Group
    Value: !GetAtt SecurityGroup.GroupId
    Export:
      Name:
        !Sub '${AWS::StackName}-SecurityGroup'

  EFS:
    Description: Elastic FileSystem
    Value: !Ref EFS
    Export:
      Name:
        !Sub '${AWS::StackName}-EFS'

  EFSAccessPoint:
    Description: Elastic FileSystem Access Point
    Value: !Ref EFSAccessPoint
    Export:
      Name:
        !Sub '${AWS::StackName}-EFSAccessPoint'

  AMIParameter:
    Description: SSM Parameter path containing latest created Deepracer AMI
    Value: !Sub /DeepRacer/Images/${AWS::StackName}
    Export:
      Name:
        !Sub '${AWS::StackName}-AMIParameter'

  NetworkAclId:
    Description: Network ACL Id
    Value: !Ref NetworkAclId
    Export:
      Name:
        !Sub '${AWS::StackName}-NetworkAclId'

  InterruptionNotification:
    Description: Interruption Notification
    Value: !Ref InterruptionNotification
    Export:
      Name:
        !Sub '${AWS::StackName}-InterruptionNotification'

Conditions:
  HasSubnet0: !Not
    - !Equals [!Ref Subnet0, '']

  HasSubnet1: !Not
    - !Equals [!Ref Subnet1, '']

  HasSubnet2: !Not
    - !Equals [!Ref Subnet2, '']

  HasSubnet3: !Not
    - !Equals [!Ref Subnet3, '']

  HasSubnet4: !Not
    - !Equals [!Ref Subnet4, '']

  HasSubnet5: !Not
    - !Equals [!Ref Subnet5, '']

Resources:
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: Delete
            Prefix: imagebuilder
            Status: Enabled
            ExpirationInDays: 1

  BucketAccessPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - !GetAtt InstanceRole.Arn
              Service:
                - deepracer.amazonaws.com
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
                  - '/*'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from My IP Address

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupName: !Ref SecurityGroup
      IpProtocol: -1
      CidrIp: !Sub '${MyIPAddress}/32'


  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: EFS SG
      SecurityGroupIngress:
        -
          SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049

  EFSMountTarget0:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet0
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet0

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet1
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet1

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet2
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet2

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet3
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet3

  EFSMountTarget4:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet4
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet4

  EFSMountTarget5:
    Type: AWS::EFS::MountTarget
    Condition: HasSubnet5
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref Subnet5

  NACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclId
      CidrBlock: !Sub '${MyIPAddress}/32'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: !Ref RuleNumber

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
              - Effect: Allow
                Action:
                  - kms:*
                  - s3:*
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true

  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0755'
        Path: '/home/ubuntu/efs'

  InterruptionNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: InterruptionNotification

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowServices
            Effect: Allow
            Principal: '*'
            Action:
              - sns:Publish
              - sns:Subscribe
            Resource: '*'
      Topics:
        - !Ref 'InterruptionNotification'
